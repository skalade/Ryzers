FROM rocm/pytorch:rocm7.0_ubuntu24.04_py3.12_pytorch_release_2.6.0

SHELL ["/bin/bash", "-lc"]


RUN getent group render || groupadd render
RUN getent group video || groupadd video
RUN getent group kvm || groupadd kvm


RUN usermod -aG render root
RUN usermod -aG video root
RUN usermod -aG kvm root

# add dependencies
RUN apt-get update && \
    apt-get install -y \
	konsole 


ENV AMDGPUTOP_TIMEOUT=10s
ENV MUJOCO_GL=egl


RUN wget https://github.com/Umio-Yasuno/amdgpu_top/releases/download/v0.11.0/amdgpu-top_0.11.0-1_amd64.deb \
    -O amdgpu-top.deb
RUN dpkg --install amdgpu-top.deb

# Use an argument to get GPU architecture
ARG HSA_OVERRIDE_GFX_VERSION
ARG GFXSTRING

# Install dependencies
RUN apt-get update && \
    apt-get install -y \
    build-essential \
    cmake \
    git \
    wget \
    curl \
    libssl-dev \
    libcurl4-openssl-dev \
    rsync

#  Vulkan
RUN apt-get update \
&& wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | tee /etc/apt/trusted.gpg.d/lunarg.asc \
&& wget -qO /etc/apt/sources.list.d/lunarg-vulkan-noble.list https://packages.lunarg.com/vulkan/lunarg-vulkan-noble.list \
&& apt update \
&& apt install -y vulkan-sdk

# Clone and build LlamaCPP
WORKDIR /ryzers
RUN git clone https://github.com/ggml-org/llama.cpp.git llamacpp && \
    cd llamacpp && \
    HIPCXX="$(hipconfig -l)/clang" HIP_PATH="$(hipconfig -R)" \
    cmake -S . -B build -DLLAMA_CURL=ON -DGGML_VULKAN=1 -DGGML_HIP=ON -DAMDGPU_TARGETS=$GFXSTRING -DCMAKE_BUILD_TYPE=Release \
    && cmake --build build --config Release -- -j 16

# add dependencies
RUN apt-get update && \
    apt-get install -y \
	curl

RUN curl -fsSL https://ollama.com/install.sh | sh
RUN python3 -m pip install ollama

EXPOSE 11434

# Install deps
RUN apt-get update && apt-get install -y git vim wget

RUN git clone https://github.com/huggingface/lerobot.git && \
	cd lerobot && \
	git checkout 5c87365cc160617c45dc5d1bbb3788de010271a7 && \
	sed -i -E '/assert not torch\.isinf\((mean|std)\)\.any\(\)/ s/^([[:space:]]*)/\1#/' lerobot/common/policies/normalize.py

RUN cd lerobot && \
	pip install ".[smolvla]"


# Install deps
RUN apt-get update && apt-get install -y git \
	vim \
	wget \
	libegl1-mesa-dev \
	libgles2-mesa-dev

RUN git clone https://github.com/tonyzhaozh/act

RUN pip install matplotlib && \
	pip install einops && \
	pip install packaging && \
	pip install h5py && \
 	pip install ipython && \
	pip install dm_control && \
	pip install pyquaternion

# Install ROS2 
# Allow build-time argument for ROS distro (jazzy or kilted)
ARG ROS_DISTRO=kilted
ENV ROS_DISTRO=${ROS_DISTRO}

# Avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# 1. Set locale
RUN apt-get update && apt-get install -y locales \
 && locale-gen en_US en_US.UTF-8 \
 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 \
 && rm -rf /var/lib/apt/lists/*
ENV LANG=en_US.UTF-8
ENV LC_ALL=en_US.UTF-8

# 2. Enable universe repo
RUN apt-get update && apt-get install -y software-properties-common curl gnupg2 \
 && add-apt-repository universe \
 && rm -rf /var/lib/apt/lists/*

# 3. Add ROS 2 apt repository
RUN apt update && sudo apt install curl -y && \
   export ROS_APT_SOURCE_VERSION=$(curl -s https://api.github.com/repos/ros-infrastructure/ros-apt-source/releases/latest | grep -F "tag_name" | awk -F\" '{print $4}') && \
   curl -L -o /tmp/ros2-apt-source.deb "https://github.com/ros-infrastructure/ros-apt-source/releases/download/${ROS_APT_SOURCE_VERSION}/ros2-apt-source_${ROS_APT_SOURCE_VERSION}.$(. /etc/os-release && echo ${UBUNTU_CODENAME:-${VERSION_CODENAME}})_all.deb" && \
dpkg -i /tmp/ros2-apt-source.deb


# 4. Install ROS 2 (desktop variant)
RUN apt-get update \
 && apt-get upgrade -y \
 && apt-get install -y ros-${ROS_DISTRO}-desktop \
 && rm -rf /var/lib/apt/lists/*

# 5. (Optional) Install dev tools
RUN apt-get update && apt-get install -y ros-dev-tools \
 && rm -rf /var/lib/apt/lists/*

# 6. Source ROS environment
SHELL ["/bin/bash", "-c"]
RUN echo "source /opt/ros/${ROS_DISTRO}/setup.bash" >> /root/.bashrc


COPY test_act.sh .
COPY test_amdgputop.sh .
COPY test_llamacpp.sh .
COPY test_smolvla.py .
COPY test_smolvla.sh .

RUN chmod +x test_act.sh
RUN chmod +x test_amdgputop.sh
RUN chmod +x test_llamacpp.sh
RUN chmod +x test_smolvla.sh

RUN pip install jupyterlab "numpy<2"

COPY notebooks /ryzers/
WORKDIR /ryzers/notebooks

RUN chmod -R 777 /ryzers/notebooks
